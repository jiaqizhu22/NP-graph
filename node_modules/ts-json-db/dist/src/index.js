"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_json_db_1 = require("node-json-db");
/**
 * Typed wrapper around the JsonDB. Use the internal database field to use non-typed functions.
 */
class TypedJsonDB {
    /**
     * Creates an instance of TypedJsonDB.
     * @param {string} filename Where to save the database.
     * @param {boolean} [throwIfNotFound] Throw exceptions if the data is not found. (default: `true`)
     * @param {boolean} [saveOnPush] Save the database at each push command into the json file. (default: `true`)
     * @param {boolean} [humanReadable] The json file will be easily readable by a human. (default: `false`)
     * @param {string} [separator] What to use as a separator. (default: `'/'`)
     * @memberof TypedJsonDB
     */
    constructor(filename, throwIfNotFound = true, saveOnPush = true, humanReadable = false, separator = '/') {
        this.helpMeRemember = {
            singles: {
                /**
                 * Don't call this method. It's only purpose is for the developer to get an autocomplete list of paths to single values.
                 */
                hintPlease(_autocomplete) { }
            },
            arrays: {
                /**
                 * Don't call this method. It's only purpose is for the developer to get an autocomplete list of paths to arrays.
                 */
                hintPlease(_autocomplete) { }
            },
            dictionaries: {
                /**
                 * Don't call this method. It's only purpose is for the developer to get an autocomplete list of paths to dictionaries.
                 */
                hintPlease(_autocomplete) { }
            }
        };
        this.internal = new node_json_db_1.JsonDB(filename, saveOnPush, humanReadable, separator);
        this.throwIfNotFound = throwIfNotFound;
    }
    /**
     * Updates the path if it's an array or a dictionary.
     * @private
     * @param {*} path The base path to be updated.
     * @param {*} location The location (index or key).
     * @param {boolean} arrayEnd Whether to add `[]` at the end of the path for an array.
     * @returns The updated path.
     * @memberof TypedJsonDB
     */
    updatePath(path, location, arrayEnd) {
        if (typeof location === "number")
            path += "[" + location + "]"; // Array value.
        else if (typeof location === "string")
            path += "/" + location; // Dictionary value.
        else if (arrayEnd)
            path += "[]"; // Array end.
        return path;
    }
    get(path, location) {
        path = this.updatePath(path, location, false);
        if (!this.throwIfNotFound) {
            let result = null;
            try {
                result = this.internal.getData(path);
            }
            catch (error) { }
            return result;
        }
        return this.internal.getData(path);
    }
    set(path, data) {
        this.internal.push(path, data);
    }
    setDefault(path, data) {
        if (!this.internal.exists(path))
            this.internal.push(path, data);
    }
    push(path, data, location) {
        path = this.updatePath(path, location, true);
        this.internal.push(path, data, true);
    }
    merge(path, data, location) {
        path = this.updatePath(path, location, false);
        if (!this.internal.exists(path))
            throw new Error("You tried to merge with unexisting data. The resulting type would be undefined.");
        this.internal.push(path, data, false);
    }
    exists(path, location) {
        path = this.updatePath(path, location, false);
        return this.internal.exists(path);
    }
    delete(path, location) {
        path = this.updatePath(path, location, false);
        return this.internal.delete(path);
    }
    /**
     * Reload the database from the file.
     * @memberof TypedJsonDB
     */
    reload() {
        this.internal.reload();
    }
    /**
     * Manually load the database (automatically done when the first `get()` is called).
     * @memberof TypedJsonDB
     */
    load() {
        this.internal.load();
    }
    /**
    * Manually save the database.
    * @param {boolean} [force] If true, database will be saved even if not loaded.
    * @memberof TypedJsonDB
    */
    save(force) {
        this.internal.save(force);
    }
}
exports.TypedJsonDB = TypedJsonDB;
//# sourceMappingURL=index.js.map